#include<bits/stdc++.h>
#define ll long long
#define BUFF() ios::sync_with_stdio(0);cin.tie();cout.tie();
#define forr(i,a,b) for(int _a=(a),_b=(b),i=_a;i<=_b;i++)
#define fi first
#define se second
#define get(x,i) ((x>>(i-1))&1)
#define endl '\n'
#define left __left
#define right __right
#define Task(name) \
    freopen(name".inp","r",stdin);\
//    freopen(name".out","w",stdout);
#define mp make_pair
using namespace std;
const int maxn=1e6+1;
int *temp;

void mergeParts(int *arr, int l, int mid, int r) {
    int i = l, j = mid + 1;
    int k = 0;

    while (i <= mid && j <= r) {
        int nextValue;
        if (arr[i] < arr[j])
            nextValue = arr[i++];
        else
            nextValue = arr[j++];
        temp[k++] = nextValue;
    }

    while (i <= mid) {
        temp[k++] = arr[i++];
    }
    while (j <= r) {
        temp[k++] = arr[j++];
    }

    for (i = 0; i < k; i++) {
        arr[l + i] = temp[i];
    }
}

void mergeSort(int *arr, int l, int r) {
    if (l >= r)
        return;

    int mid = (l + r) / 2;
    mergeSort(arr, l, mid);
    mergeSort(arr, mid + 1, r);
    mergeParts(arr, l, mid, r);
}

int main() {
	freopen("test1.inp","r",stdin);
    int n=1e6;
    
    int *arr = (int*)malloc(n * sizeof(int));
    temp = (int*)malloc(n * sizeof(int));
    

     for (int i = 0; i < n; i++) {
    	cin>>arr[i];
    }

	clock_t start = clock();
    mergeSort(arr, 0, n - 1);
    clock_t end   = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    cout<<time_spent;

   
    return 0;
}
